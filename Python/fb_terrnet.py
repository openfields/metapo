#!/usr/bin/env python
#
##############################################################################
#
# MODULE:       model
#
# AUTHOR(S):    Will Fields
#
# PURPOSE:      Delineates habitat networks for Ft. Bragg
#
# DATE:         Tue Aug 10, 2018
#
##############################################################################

#%module
#% description: Script generated by wxGUI Graphical Modeler.
#%end

import sys
import os
import atexit

from grass.script import parser, run_command

def cleanup():
    pass
# 
def main():
# Set region & mask
#   run_command("g.region",
#                 vector = 'fb_65r')
# 
#   run_command("r.mask",
#                 maskcats = "*",
#                 vector = 'fb_65r',
#                 layer = "1")
# 
# # # mapcalcs for habitat networks from rasters
#   run_command("r.mapcalc",
#                 expression = 'fb_65r' + "_tmpvd=if(us_140vdep<67,1,null())",
#                 overwrite = True)
# # # 
#   run_command("r.mapcalc",
#                 expression = 'fb_65r' + "_tmp42=if(nlcd_2011v14@PERMANENT==42,1,null())",
#                 overwrite = True)
# # # 
#   run_command("r.mapcalc",
#                 expression = 'fb_65r' + "_tmp41424390=if(nlcd_2011v14@PERMANENT==41 || nlcd_2011v14@PERMANENT==42 || nlcd_2011v14@PERMANENT==43 || nlcd_2011v14@PERMANENT==90,1,null())",
#                 overwrite = True)
# 
#   run_command("r.mapcalc",
#                 expression = 'fb_65r' + "_42=" + 'fb_65r' + "_tmpvd * " + 'fb_65r' + "_tmp42",
#                 overwrite = True)
#                 
#   run_command("r.mapcalc",
#                 expression = 'fb_65r' + "_41424390=" + 'fb_65r' + "_tmpvd * " + 'fb_65r' + "_tmp41424390",
#                 overwrite = True)
# # # convert rasters to vectors
#   run_command("r.to.vect", 
#                 input = "fb_65r_42",
#                 output = "fb_65r_42",
#                 type = "area")
# 
#   run_command("r.to.vect", 
#                 input = "fb_65r_41424390",
#                 output = "fb_65r_41424390",
#                 type = "area")
# # # add area column
#   run_command("v.db.addcolumn",
#                 map = "fb_65r_42",
#                 layer = "1",
#                 columns = "area double precision")
#                 
#   run_command("v.db.addcolumn",
#                 map = "fb_65r_41424390",
#                 layer = "1",
#                 columns = "area double precision")
# # # calculate areas
#   run_command("v.to.db",
#                 map = "fb_65r_42",
#                 layer = "1",
#                 type = "boundary",
#                 option = "area",
#                 columns = "area", 
#                 query_layer = "1")
# 
#   run_command("v.to.db",
#                 map = "fb_65r_41424390",
#                 layer = "1",
#                 type = "boundary",
#                 option = "area",
#                 columns = "area", 
#                 query_layer = "1")

# need to add export of attribute table with coordinates

#   run_command("v.out.ascii",
#                 input = "fb_65r_42",
#                 format = "point",
#                 where = "area > 50000",
#                 separator = "comma",
#                 flags = "c",
#                 columns = "cat,area",
#                 output = "C:/Users/u4cnnwrf/Documents/Regional Networks/metapo/data/fb_65r42.csv")
                
  run_command("v.out.ascii",
                input = "fb_65r_41424390",
                format = "point",
                where = "area > 50000",
                separator = "comma",
                flags = "c",
                columns = "cat,area",
                output = "C:/Users/u4cnnwrf/Documents/Regional Networks/metapo/data/fb_65r_41424390.csv")


# remove raster mask
#   run_command("r.mask",
#                 flags = 'r',
#                 maskcats = "*",
#                 layer = "1")


  return 0

if __name__ == "__main__":
    options, flags = parser()
    atexit.register(cleanup)
    sys.exit(main())
