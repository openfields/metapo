#!/usr/bin/env python
#
##############################################################################
#
# MODULE:       model
#
# AUTHOR(S):    u4cnnwrf
#
# PURPOSE:      Script generated by wxGUI Graphical Modeler.
#
# DATE:         Tue Oct 09 06:46:17 2018
#
##############################################################################

#%module
#% description: Script generated by wxGUI Graphical Modeler.
#%end

import sys
import os
import atexit

from grass.script import parser, run_command

def cleanup():
    pass

def main():
  
    run_command("g.region",
                vector = "fccg_65r@report")
# 41424390  
    run_command("v.overlay",
                ainput = "fccg_65r_pad@report",
                alayer = "1",
                atype = "auto",
                binput = "fccg_65r_41424390@report",
                blayer = "1",
                btype = "area",
                operator = "or",
                output = "fccg_pad41424390",
                olayer = "1,0,0",
                snap = 1e-8)

    run_command("v.db.addcolumn",
                map = "fccg_pad41424390",
                layer = "1",
                columns = "subarea double precision")

    run_command("v.to.db",
                map = "fccg_pad41424390",
                layer = "1",
                type = "point,line,boundary,centroid",
                option = "area",
                columns = "subarea",
                query_layer = "1",
                separator = "pipe")
# 414271
    run_command("v.overlay",
                ainput = "fccg_65r_pad@report",
                alayer = "1",
                atype = "auto",
                binput = "fccg_65r_414271@report",
                blayer = "1",
                btype = "area",
                operator = "or",
                output = "fccg_pad414271",
                olayer = "1,0,0",
                snap = 1e-8)

    run_command("v.db.addcolumn",
                map = "fccg_pad414271",
                layer = "1",
                columns = "subarea double precision")

    run_command("v.to.db",
                map = "fccg_pad414271",
                layer = "1",
                type = "point,line,boundary,centroid",
                option = "area",
                columns = "subarea",
                query_layer = "1",
                separator = "pipe")
                
# 31

    run_command("r.mask",
                maskcats = "*",
                vector = 'fccg_65r',
                layer = "1")

 # mapcalcs for habitat networks from rasters
  
    run_command("r.mapcalc",
                expression = 'fccg_65r' + "_tmp31=if(nlcd_2011v14@PERMANENT==31,1,null())",
                overwrite = True)

  # multiply vdep & nlcd

    run_command("r.mapcalc",
                expression = 'fccg_65r' + "_31=" + 'fccg_65r' + "_tmpvd * " + 'fccg_65r' + "_tmp31",
                overwrite = True)

  # write data to vector       
    run_command("r.to.vect",
                input = 'fccg_65r_31',
                output = 'fccg_65r_31',
                type= "area",
                overwrite = True)         

  # remove raster mask
    run_command("r.mask",
                flags = 'r',
                maskcats = "*",
                layer = "1")

    run_command("v.overlay",
                ainput = "fccg_65r_pad@report",
                alayer = "1",
                atype = "auto",
                binput = "fccg_65r_31@report",
                blayer = "1",
                btype = "area",
                operator = "or",
                output = "fccg_pad31",
                olayer = "1,0,0",
                snap = 1e-8)

    run_command("v.db.addcolumn",
                map = "fccg_pad31",
                layer = "1",
                columns = "subarea double precision")

    run_command("v.to.db",
                map = "fccg_pad31",
                layer = "1",
                type = "point,line,boundary,centroid",
                option = "area",
                columns = "subarea",
                query_layer = "1",
                separator = "pipe")

    return 0

if __name__ == "__main__":
    options, flags = parser()
    atexit.register(cleanup)
    sys.exit(main())
